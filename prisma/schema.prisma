// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique()
  password  String
  createdAt DateTime  @default(now())
  role      Role      @default(USER)
  updatedAt DateTime  @updatedAt
  product   Product[]
  order     Order[]
  cart      Cart?
}

model Product {
  id           String         @id @default(uuid())
  name         String
  description  String
  price        Float
  stock        Int
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  productImages ProductImage[]
  category     Category       @relation(fields: [categoryId], references: [id])
  categoryId   String
  orderProducts OrderProduct[]
  cartProducts  CartProduct[]
}

model ProductImage {
  id        String   @id @default(uuid())
  imgUrl    String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products   Product[]
}

model Order {
  id           String         @id @default(uuid())
  totalPrice   Float
  status       Status         @default(PENDING)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id])
  userId       String
  orderProducts OrderProduct[]
}

model OrderProduct {
  id        String  @id @default(uuid())
  quantity  Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model Cart {
  id          String        @id @default(uuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      String  @unique
  cartProduct CartProduct[]
}

model CartProduct {
  id        String  @id @default(uuid())
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

enum Role {
  ADMIN
  USER
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
}
